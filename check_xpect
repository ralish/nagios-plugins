#!/usr/bin/env python
import base64
import json
import os
import sys
import urllib2


URL_LIST_EXPECTATIONS   = 'http://localhost/v1/accounts/%s/expectations'
URL_GET_EXPECTATION     = 'http://localhost/v1/accounts/%s/expectations/%s'

XPECT_FAILED            = 1
XPECT_SUCCESSFUL        = 2
XPECT_WAITING           = 3

NAGIOS_OK               = 0
NAGIOS_WARNING          = 1
NAGIOS_FAILED           = 2


def parse_args():
    if len(sys.argv) < 3 or len(sys.argv) > 4:
        print 'Usage: %s <account id> <access key> [expectation id]' % os.path.basename(sys.argv[0])
        return

    args = {
        'account_id': sys.argv[1],
        'access_key': sys.argv[2]
    }
    if len(sys.argv) == 4:
        args['expectation_id'] = sys.argv[3]

    return args


def get_expectations(args):
    if 'expectation_id' in args:
        request = urllib2.Request(URL_GET_EXPECTATION % (args['account_id'], args['expectation_id']))
    else:
        request = urllib2.Request(URL_LIST_EXPECTATIONS % args['account_id'])

    request.add_header('Host', 'xpect.io')
    request.add_header('X-Access-Key', args['access_key'])

    res = urllib2.urlopen(request)

    if 'expectation_id' in args:
        return [json.loads(res.read())]
    else:
        return json.loads(res.read())


def evaluate_status(expectations):
    status = NAGIOS_OK

    for expectation in expectations:
        if expectation['state'] == XPECT_FAILED:
            print "Expectation '%s' is failing" % expectation['eventName']
            status = NAGIOS_FAILED
        elif expectation['state'] == XPECT_WAITING:
            print "Expectation '%s' is waiting" % expectation['eventName']
            status = max(status, NAGIOS_WARNING)
        elif expectation['state'] != XPECT_SUCCESSFUL:
            print "Expectation '%s' is in an unknown state!" % expectation['eventName']
            status = NAGIOS_FAILED

    if status == NAGIOS_OK:
        if len(expectations) > 1:
            print "OK - All %d expectations are successful" % len(expectations)
        else:
            print "OK - Expectation '%s' is successful" % expectation['eventName']

    return status


if __name__ == '__main__':
    args = parse_args()

    if not args:
        sys.exit(NAGIOS_FAILED)

    try:
        expectations = get_expectations(args)
    except urllib2.HTTPError, e:
        print "Encountered HTTP error code %s trying to retrieve expectation details!" % e.code
        sys.exit(NAGIOS_FAILED)

    status = evaluate_status(expectations)

    sys.exit(status)
